#Типы данных: int,str,float,bool,none,list,dict

#a = 1.2
#b = 3
#c = a*3
#print(round(c, 2)) ##round() округляет в большую сторону, внутри мы указалит округлять до 2-х знаков

#% это проверка остатка от деления, к примеру для проверки четного числа
#/ деление
#* умножение
#== сравнение
#= равно
#** возведение в степень

#Проверка на тип None:

#connected=databased.connect()
#not_connect=connected is None #В данном случае мы подключаемся к бд, далее
#если переменная not_connected будет иметь тип none, значит подключение к бд не произошло

#a=None
#f a==None:
#    print(type(a))
#else:
 #   print('хз что это за тип')

##Срезы(механизм выборки строк из предложения или слова):
#a='Hellow'
#print(a[2:])

###################################################################################################################################################################################
####Тип данных string


#len() считает количество символов
#upper()
#lower() нижний регистр
#islower() проверка того что все буквы в нижнем регистре, если да вернет True
#isupper наоборот
#find()поиск какого то символа в стоке, он покажет каким по счету он будет, можно еще указать с какого символа искать (l, 5)
#isalnum()строка состоит только из цифр, вернет true или false
#isalpha() строка состоит только из букв
#isspace() проверяет что состоит ли строка только из одних пробелов
#как проверить сто строка пустая? x='';print(x == '')
#можно так: print(x.strip() == '') так мы сначала удалим пробелы, а потом сравним спустой строкой
#проверить что строка начинается с определенных
#символов startswith("he"), кончается на endswith("llo")
#split() делает из предложения список, см ниже.

#x = 'Hellow, world'
#print(x.split(','))

#x="HELLOW"
#if x.isupper():
#    print("Все буквы в верхнем регистре")
#else:
#   print("там все регистры")
###################################################################################################################################################################################
##Форматирование строк
#print("My name is {} and Im {} years".format("Pavel", "30"))
#print("My name is {0} and Im {1} years".format("Pavel", "30"))
#name="Pavel"
#age=30
name = 'Pavel'
age = 30
print(f'My name is {name} and Im {age} old years')
Еще можно так: s = '%s,eggs and %s' % ('spam', 'SPAM') # Вернет spam,eggs and SPAM
###################################################################################################################################################################################
##Работа с файлами
import os
##посмотрим в каком каталоге мы находимся
#dirpath=os.getcwd()
#print(dirpath)

#with open(r'C:\Users\family\Desktop\интерактивный курс\test.txt', 'r') as file:
 #   files = file.write('Hellow world!!')
#    files = file.read()
#print(files)
#readlines() читает и все содержимое передает в список. прмер ниже

with open(r'C:\Users\family\Desktop\интерактивный курс\test.txt', 'r') as file:
 #   files = file.write('Hellow world!!')
    files = file.readlines()
print(files)
###################################################################################################################################################################################
###list()
int_list = [1,2,3]
print (int_list[0])
print(len(int_list))
name_list = ['Pavel', 'Alex']
##Конкотенация в list()
print(str(int_list[0]) + name_list[1])
#Добавить вконец списка append()
#Добавить в любую позицию какую нам надо insert()
#Удалить последний в списке pop() # с передачей индэкса можем удалить любой символ
#Сортировка списка
name_list.sort()
#Сортировка по длинне элементов списка
name_list.sort(key=len)
#Сортировка по убыванию
int_list.sort(reverse=True)
#Функция поиска элементов по индэксу
print(int_list.index(1))
#Можем искать во всех элементов количество конкретных символов, например буквы e
print(name_list[:1].count('e'))
#Копия списка
copy = int_list.copy()
#Очистка списка
int_list.clear()
print(int_list)
ord(x)Функция ord() для символа x вернет число, из таблицы символов Unicode представляющее его позицию. Например, ord('a') возвращает целое число 97 и ord('€') вернет 8364.

from collections import OrderedDict
###################################################################################################################################################################################
###OrderedDict() метод, при котором словари можно сравнивать в порядке расположения их элементов при том, что все элементы в них одинвковые
#пример
d1 = {}
d1['a'] = 'A'
d1['b'] = 'B'
#списки одинаковые, но элементы в них в разном порядке, но при сравнении они одинаковы
d2 = {}
d2['b'] = 'B'
d2['a'] = 'A'
print(d1==d2) ##Вернет True
########## Dict()
d = {'c':1,'b':3}
ks = list(d.keys())
for key in ks:
    print(key, '=>', d[key])

for key in sorted(ks):
    print(key, '=>', d[key])
d = {'a':1,'b':3}
print(d['a']) if 'a' in d else print(0)
d = {'a':1,'b':3}
# print(d['a']) if 'a' in d else print(0)
value=d.get('x',0)
print(value)
##Если включаем OrderedDict()

d1 = OrderedDict()
d1['a'] = 'A'
d1['b'] = 'B'

d2 = OrderedDict()
d2['b'] = 'B'
d2['a'] = 'A'
print(d1==d2) ##вернет False
###################################################################################################################################################################################
####tuple() Кортежи /тот же список, но который нельзя изменять

####nemedtuple() именованные кортежи

from collections import namedtuple
player = namedtuple('Player', 'name age year')
players = player('Pavel', '30', '1991')
print(players)##Вернет Player(name='Pavel', age='30', year='1991'), тоесть разбил каждый элемент в соответствии с названиями
print(players.name)##Можно теперь обратится либо по имени к элементу кортежа , либо по индэксу
print(players[0])
###################################################################################################################################################################################
# ###set() Множество
# my_set = set()
# my_set.add(1)##Добавим в set элемент
# print(my_set)
# my_set.add(2)
# print(my_set)

# my_list = [1,2,3,4,4,4,3]
# s = set(my_list)
# print(s) ##Покажет только уникальные элементы в листе {1, 2, 3, 4}
# print(len(s))
# print(1 in s)## Покажет правда это или лож

# set1 = {1,2,3,4}##set1 явлется подмножеством set2, так как в set2 есть все что есть в 1-ом + еще один элемент, а наоборот нет
# set2 = {1,2,3,4,5}
# ##Проверим явялется ли подмножеством set1 у set2
# print(set1.issubset(set2))## Вернет True
# ##Проверка того, что во всех множествах все элементы разные
# print(set1.isdisjoint(set2))##Вернет False, так как первые 4 символа в обоих множествах одинаковые
# ##Можно на основании 2-х множеств создать еще одно:
# set3 = set1.union(set2)
# print(set3) ##{1, 2, 3, 4, 5}
# ##Можно вернуть только одинаковые элементы в обоих множествах при сравнении
# set3 = set1.intersection(set2)
# print(set3)##{1, 2, 3, 4}
##Есть противоположный метод, который при сравнении возвращает те символы которые не совпадают
set1 = {0,1,2,3,4}
set2 = {1,2,3,4,5}
set3 =set1.difference(set2)#{0} вернул только то, что нет в set2
set4 = set1.symmetric_difference(set2)#{0, 5} вернул то чего нет в set2 и то что есть в set2 чего нет в set1
print(set3)
print(set4)
##Можно обновить множество добавив недостающие элементы в левое множество из правого
set1.update(set2)
print(set1)##Покажет {0, 1, 2, 3, 4, 5}, а до этого был {0,1,2,3,4}
##Удаление элементов из множества
set1.remove(1)
print(set1)##{0, 2, 3, 4, 5}
set1.pop()
print(set1)##{2, 3, 4, 5} Удалит случайный символ и вернет его в стандартный вывод, в данном случае 0

########################################################################################################################################################
####Цикл for

##Пример цикла в цикле, ищем пары в двух списках, сумма которых равна 0

list1 = [2,3,4,5] 
list2 = [-2,-3,4,-5]
pairs = []
for x in list1:
    for y in list2:
        cur_sum = x + y
        if cur_sum == 0:
            pairs.append((x,y))
print(pairs)

########################################################################################################################################################
##list comprehension Если мы хотим пройтись циклом по чему-то и перенести каждый шаг цикла в список например,
# то это может выглядеть как в 1 варианте так и во втором, второй это и есть list comprehension
# greeting = 'Hellow world'
# # chars = []
# # for i in greeting:
# #     chars.append(i)
# # print(chars)

# chars = [i for i in greeting]
# print(chars)
# chars = [i for i in 'Hellow world']

# numbers = [i for i in range(1,11)]
# print(numbers)
# ##Получим в список квадраты чисел из множества чисел, можно добавить условия умножать на себя только нечетные числа
# numbers = [i*i for i in range(1,11) if i%2 != 0]
# print(numbers)

# ##Преобразуем сантимерты в дюймы:
# len_in_centimeteres = [3,44,24,646]
# len_in_inches = [(round(cm / 2.54, 2)) for cm in len_in_centimeteres]
# print(len_in_inches)
###Выберем набор tuple() из цифр, сумма которых равна 0
list1 = [2,3,4,5] 
list2 = [-2,-3,4,-5]
pairs = [(x, y) for x in list1 for y in list2 if x + y == 0]
print(pairs)
###########################################################################################################################################################################

#######ЦИкл while

# x = 0
# while x < 3:
#     print(f'x equals {x}')
#     x += 1
# else:
#     print('Не работает')

# vals = [1,2,3,4,5,6,7]
# sum = 0
# for v in vals:
#     if v % 2 == 0:
#         continue ##Значит н евыполнять код дальше, а вернуться в начало
#     else:
#         sum += v
#     if sum >= 10:
#         break ##Закончить цикл
# print(sum)

#####Функции матматические
##Функция которая отбирает - у числа
print(abs(-1))
##Функция которая выбирает минимальное и максимальное значение из списка
print(min(1,2,3))
print(max(1,2,3))
##Функция которая возводит число в степень
print(pow(4, 2))
##Функция округления
print(round(3.522, 2)) ## второй аргумент это количество символов к которому приводим
##Функция суммирующая список
print(sum([1,2,3,4]))
##Функции которые приводят число к шестиричному восьмиричному и бинарному виду
print(hex(42)) # шестиричная
print(oct(42)) # восьмиричн
print(bin(42))
########Функции
# Функция all() Возвращает из листа, списка, кортежа значения,
# если все они равны к примеру True, если есть один False, то она вернет False

# players = [('Pavel', 30), ('Yana', 33)]
# old_years = all(years > 20 for _, years in players)# запустил цикл из двух элементов кортежей, первое имя 
# #поставим  _, так как оно не важно, а второе возьмем то, по коорому условие создали
# print(old_years)
# #any() работает так же как all()только наоборот
# #zip() в нен можно вставлять несколько списков например и зпустить цикл по обрим листам
# #Пример
# list1 = ['Pavel', 'Yana']
# list2 = ['30', '33']
# zipped = list(zip(list1, list2))
# zipped1 = dict(zip(list1, list2))
# print(zipped)
# print(zipped1)

########################## Ошибки и исключения
def divide(a,b):
    try:
        return a / b
    except ZeroDivisionError as ex: ## Если мы знаем какая ошибка там будет пишем только ее, если не знаем точно, то можем написать несколько except, или просто except:, в нее попадет любая ошибка.
        print(f'Error {ex}, На 0 делить нельзя')
    else:
        print('Result')

def input_user():
    while True:

        try:
            reply = int(input('Введите число :')) # Мы приводим результат ввода к типу int(), если пользователь введет что то с типом str(), то будет ошибка
            return reply
        except:
            print('Неверно, введите попробуйте еще раз')
            continue
a = input_user()
print(a) 

##################################### Интересные инструменты #################
------функция ",".join() #######делает элементы списка в str и разделяет их разделителем, который мы укажем в начале функции, здесь это ','
------функция replace('ies', 'y') ###### находит в слове символы и заменяет на что то другое, здесь меняет ies на y



from datetime import time, date, timedelta, datetime
### Дата
date = date(2021,5,11)
print(date)
print(date.month)
print(date.year)
print(date.day)
### Время
time = time(23,5,20)
print(time)
print(time.minute)
print(time.hour)
print(time.second)
### пркажет мин дату и мах дату
print(date.max)
print(date.min)
### Покажет время и дату
dt = datetime(2021,5,11,23,5,20)
print(dt)
print(dt.year)
########### Покажет текущую дату и время
now = datetime.now()
print(now)
########## Можно распарсить дату и время, которые прилетают в качестве строки
d = '30/08/2018 22:40'
dt1 = datetime.strptime(d, "%d/%m/%Y")
print(dt1)
dt2 = datetime.strptime("30/08/2018", "10:40", "%d/%m/%Y", "%h:%m")
print(dt2)
####

